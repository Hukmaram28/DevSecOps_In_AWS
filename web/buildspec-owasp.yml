---
version: 0.2
env:
  variables:
    IMAGE_REPO_NAME: "crypteye-web"
    AWS_ACCOUNT_ID: "211125556960"
    AWS_DEFAULT_REGION: "us-east-1"
    EKS_CLUSTER_NAME: "my-cluster"
    NAMESPACE: "dev"
phases:
  install:
    runtime-versions:
      java: corretto8
    commands:
      - yum -y update
      - echo Installing app dependencies and Kubectl tool for K8s...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - curl -s -qL -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
      - chmod +x /usr/bin/jq
  build:
    commands:
      - echo Logging into Amazon EKS...
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME
      - echo check config
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc -n $NAMESPACE
      - ALB_URL=$(kubectl get svc $IMAGE_REPO_NAME -n $NAMESPACE -o json | jq -r ".status.loadBalancer.ingress[0].hostname"):3000
      - echo $ALB_URL
      - echo Starting OWASP Zed Attack Proxy active scanning...
      - chmod 777 $PWD
      - mkdir -p /zap/wrk
      - chmod 777 /zap/wrk
      - docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-weekly zap-baseline.py -t http://$ALB_URL -c passive-scan.conf -J owaspresult.json
  post_build:
    commands:
      - ls -lrt $CODEBUILD_SRC_DIR
      - cat owaspresult.json
      - |
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"OWASP-Zap\", \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": \"$CODEBUILD_SOURCE_REPO_URL\", \"source_branch\": \"$CODEBUILD_SOURCE_VERSION\", \"build_id\": \"$CODEBUILD_BUILD_ID\", \"source_commitid\": \"$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"report\": . }" owaspresult.json > payload.json
      - aws lambda invoke --cli-binary-format raw-in-base64-out --function-name ImpToSecurityHubEKS --payload file://payload.json owaspresult.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";

      # - if [ $high_alerts != 0 ] || [ $medium_alerts != 0 ]; then echo "there are high or medium alerts.. failing the build" && exit 1; else exit 0; fi
